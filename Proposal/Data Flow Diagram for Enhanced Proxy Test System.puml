```plantuml
@startuml
skinparam monochrome true

' Define participants (components involved in data flow)
participant "Test Case" as TestCase
participant "Class1Factory" as Factory
participant "Class1/InstrumentedClass1" as Class1
participant "Class2/InstrumentedClass2NoSummarize" as Class2
participant "Class3/InstrumentedClass3NoExecuteNoSummarize" as Class3
participant "TestProxy" as Proxy
participant "TestTracker" as Tracker

' Data flow for a test execution (e.g., execute(2))
TestCase -> Factory: create(use_instrumented, tracker)
Factory -> Class1: instantiate (InstrumentedClass1 if true)
TestCase -> Class1: execute(2)
Class1 -> Proxy: wrap_int(execute, 2)
Proxy -> Tracker: log "Enter Class1::execute", input=2
Class1 -> Class2: transform(2)
Class2 -> Proxy: wrap_int(transform, 2)
Proxy -> Tracker: log "Enter Class2::transform", input=2
Class2 -> Class3: process(2)
Class3 -> Proxy: wrap_int(process, 2)
Proxy -> Tracker: log "Enter Class3::process", input=2

' Fault injection check (optional)
Proxy -> Proxy: check fault (e.g., Exception, CustomReturn, Delay)
Proxy -> Tracker: log "FAULT INJECTED" (if applicable)

' Return data flow
Class3 -> Proxy: result=4 (2*scale_factor)
Proxy -> Tracker: log "Exit Class3::process", output=4
Class2 -> Proxy: result=5 (4+offset)
Proxy -> Tracker: log "Exit Class2::transform", output=5
Class1 -> Proxy: result=15 (5*multiplier)
Proxy -> Tracker: log "Exit Class1::execute", output=15
Class1 -> TestCase: return 15
TestCase -> Tracker: verify call_stack and values

@enduml
```